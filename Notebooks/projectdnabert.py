# -*- coding: utf-8 -*-
"""projectDNAbert.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uKdf19aJzpgQvkqOb1wFHqLpYtp2pRRF
"""

from google.colab import drive
drive.mount('/content/drive')

import re
import csv

def calculate_cag_repeats(sequence):
    """Calculates the number of CAG repeats in a DNA sequence"""

    repeats = re.findall(r'(CAG)', sequence)
    repeat_count = len(repeats)
    return repeat_count

def label_sequence(repeat_count):
    """Label the sequence based on the number of CAG repeats"""
    if repeat_count <= 35:
        return 'Normal'
    elif 36 <= repeat_count <= 39:
        return 'Intermediate'
    elif 40 <= repeat_count <= 55:
        return 'Reduced_Penetrance'
    else:
        return 'Full_Mutation'


with open('/content/drive/MyDrive/our_project/dataset/huntington_sequences_5000.txt', 'r') as file:
    sequences = [line.strip() for line in file]


formatted_data = []
for sequence in sequences:
    repeat_count = calculate_cag_repeats(sequence)
    label = label_sequence(repeat_count)
    formatted_data.append([sequence, repeat_count, label])


with open('/content/drive/MyDrive/our_project/dataset/labeled_DATA.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(["Sequence", "CAG_Repeats", "Label"])  # Write the header
    writer.writerows(formatted_data)  # Write the data

print("Data formatted and saved to new2_Huntington.csv")

import torch
from torch.utils.data import Dataset, DataLoader
from transformers import BertTokenizer, BertForSequenceClassification
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import pandas as pd
import numpy as np
from tqdm import tqdm

class DNASequenceDataset(Dataset):
    def __init__(self, sequences, labels, tokenizer, max_length=512):
        self.sequences = sequences
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_length = max_length

    def __len__(self):
        return len(self.sequences)

    def __getitem__(self, idx):
        sequence = self.sequences[idx]
        label = self.labels[idx]

        # Convert sequence to k-mers (k=6 for DNABERT)
        kmers = [sequence[i:i+6] for i in range(len(sequence)-5)]
        kmer_sequence = " ".join(kmers)

        encoding = self.tokenizer(
            kmer_sequence,
            add_special_tokens=True,
            max_length=self.max_length,
            padding='max_length',
            truncation=True,
            return_tensors='pt'
        )

        return {
            'input_ids': encoding['input_ids'].flatten(),
            'attention_mask': encoding['attention_mask'].flatten(),
            'labels': torch.tensor(label, dtype=torch.long)
        }

def load_dna_sequences(file_path):
    df = pd.read_csv(file_path)
    sequences = df.iloc[:, 0].values  # First column contains sequences
    labels = df.iloc[:, -1].values    # Last column contains labels
    return sequences, labels

def train_dnabert_model(file_path, model_save_path, num_epochs=10):
    # Set device
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

    # Load and prepare data
    sequences, labels = load_dna_sequences(file_path)

    # Encode labels
    label_encoder = LabelEncoder()
    encoded_labels = label_encoder.fit_transform(labels)

    # Split data
    X_train, X_test, y_train, y_test = train_test_split(
        sequences,
        encoded_labels,
        test_size=0.2,
        random_state=42
    )

    # Load DNABERT tokenizer and model
    tokenizer = BertTokenizer.from_pretrained('zhihan1996/DNA_bert_6')
    model = BertForSequenceClassification.from_pretrained(
        'zhihan1996/DNA_bert_6',
        num_labels=len(label_encoder.classes_)
    ).to(device)

    # Create datasets
    train_dataset = DNASequenceDataset(X_train, y_train, tokenizer)
    test_dataset = DNASequenceDataset(X_test, y_test, tokenizer)

    # Create dataloaders
    train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)
    test_loader = DataLoader(test_dataset, batch_size=16)

    # Initialize optimizer
    optimizer = torch.optim.AdamW(model.parameters(), lr=2e-5)

    # Training loop
    best_accuracy = 0
    for epoch in range(num_epochs):
        model.train()
        total_loss = 0

        for batch in tqdm(train_loader, desc=f'Epoch {epoch+1}/{num_epochs}'):
            optimizer.zero_grad()

            input_ids = batch['input_ids'].to(device)
            attention_mask = batch['attention_mask'].to(device)
            labels = batch['labels'].to(device)

            outputs = model(
                input_ids=input_ids,
                attention_mask=attention_mask,
                labels=labels
            )

            loss = outputs.loss
            total_loss += loss.item()

            loss.backward()
            optimizer.step()

        # Evaluation
        model.eval()
        correct = 0
        total = 0

        with torch.no_grad():
            for batch in test_loader:
                input_ids = batch['input_ids'].to(device)
                attention_mask = batch['attention_mask'].to(device)
                labels = batch['labels'].to(device)

                outputs = model(
                    input_ids=input_ids,
                    attention_mask=attention_mask
                )

                _, predicted = torch.max(outputs.logits, 1)
                total += labels.size(0)
                correct += (predicted == labels).sum().item()

        accuracy = 100 * correct / total
        print(f'Epoch {epoch+1}: Average Loss = {total_loss/len(train_loader):.4f}, Accuracy = {accuracy:.2f}%')

        if accuracy > best_accuracy:
            best_accuracy = accuracy
            torch.save(model.state_dict(), model_save_path)

    return model, tokenizer, label_encoder

def predict_mutation(model, tokenizer, label_encoder, sequence, device):
    # Convert sequence to k-mers
    kmers = [sequence[i:i+6] for i in range(len(sequence)-5)]
    kmer_sequence = " ".join(kmers)

    # Tokenize
    encoding = tokenizer(
        kmer_sequence,
        add_special_tokens=True,
        max_length=512,
        padding='max_length',
        truncation=True,
        return_tensors='pt'
    )

    # Move to device
    input_ids = encoding['input_ids'].to(device)
    attention_mask = encoding['attention_mask'].to(device)

    # Get prediction
    model.eval()
    with torch.no_grad():
        outputs = model(input_ids=input_ids, attention_mask=attention_mask)
        probabilities = torch.nn.functional.softmax(outputs.logits, dim=1)
        predicted_class = torch.argmax(probabilities, dim=1)

    # Convert prediction to label
    predicted_label = label_encoder.inverse_transform(predicted_class.cpu().numpy())[0]
    probabilities = probabilities.cpu().numpy()[0]

    return {
        'predicted_label': predicted_label,
        'probabilities': dict(zip(label_encoder.classes_, probabilities))
    }

# Usage example:
if __name__ == "__main__":
    file_path = '/content/drive/MyDrive/our_project/dataset/labeled_DATA.csv'
    model_save_path = '/content/drive/MyDrive/our_project/dnabert_model.pt'

    # Train model
    model, tokenizer, label_encoder = train_dnabert_model(file_path, model_save_path)

# Example prediction
sequence = "ATGCGCGTATCAGGCCAAGTTCATGCCCGGGGCAGAATTAACAGCAGCAGCAGCAGCAGCAGCAGCAAATTAAGCAGCAGCAGCAGCAGCAGCAGCAGCAGCAATTAAAGCAGCAGCAGCAGCAGCAGCAGCAGCAGAATTAACAGCAGCAGCAGCAAATTAAGCAGCAGCAGCAGCAGCAGAATTAAAATTAAAATTAAGTCTAAATTCTTTGACAAAGCGACTTTGTACATTTTTACTAGACGTAATGCGTGACCATTATTTATTATAGGCAACGCTTCACTGAAAGTCTAAAGGTTAACGGGTCTCGAGTTATCTTGTGTGCTGTATCCGGGCATACGGGGCCTAGTCCTTACATGGCGATGAAG"
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
result = predict_mutation(model, tokenizer, label_encoder, sequence, device)

print("\nPrediction Result:")
print(f"Predicted Label: {result['predicted_label']}")
print("\nClass Probabilities:")
for label, prob in result['probabilities'].items():
        print(f"{label}: {prob:.4f}")